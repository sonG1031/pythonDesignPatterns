싱글톤 디자인 패턴이란!

• 생성 디자인 패턴
• 글로벌하게 접근 가능한 "하나의 객체"를 제공하는 패턴
• 동일한 리소스에 대한 동시 요청의 충돌을 방지하기 위해 "하나의 인스턴스를 공유"하는 작업에 주로 사용

• 목적
▶︎ 클래스에 대한 단일 객체 생성
▶︎ 전역 객체 제공
▶︎ 공유된 리소스에 대한 동시 접근 제어


• 파이썬의 임포트 방식으로 인해 모든 모듈은 기본적으로 싱글톤이다.
  1. 파이썬 모듈이 임포트됐는지 확인
  2. 이미 임포트된 경우, 해당 모듈의 객체 반환. 아니면 임포트 후 초기화
  3. 모듈은 임포트와 동시에 초기화됨. 다시 임포트하면 초기화되지 않음


• 단점
  1. 전역 변수의 값이 실수로 변경되어 사용될 수 있음(의도하지 않은 영향을 끼침)
  2. 같은 객체에 대한 여러 참조자가 생길 수 있다(의도하지 않은 영향을 끼침)


• 정리
스레드 풀과 캐시, 대화 상자, 레지스트리 설정 등 한 개의 객체만 필요한 경우가 많다.
이런 상황에서 여러 개의 객체를 생성하는 것은 리소스 낭비다. 따라서 싱글톤 패턴이 적합하다.
글로벌 엑세스 지점을 제공하는, 단점이 거의 없는 검증된 패턴이다.
단점은 전역 변수 사용이 문제가 될 수 있고, 결국 사용하지 않을 클래스를 불필요하게 초기화 할 수도 있다.
