## 참고 자료
## 심플 팩토리 패턴>>> https://www.youtube.com/watch?v=AmwEIt0vhxA&list=PLDV-cCQnUlIYcAmW4j27i8aYPbja9HePm&index=2
## 팩토리 메서드 패턴>>> https://www.youtube.com/watch?v=ejXUhFKcbIU&list=PLDV-cCQnUlIYcAmW4j27i8aYPbja9HePm&index=4

팩토리 패턴이란?

• 팩토리란 다른 클래스의 객체를 생성하는 클래스를 일컫는다.
• 객체 생성과 클래스 구현을 나눠 상호 의존도를 줄인다. 따라서 클라이언트는 클래스 구현과 상관없이 사용 가능
• 코드를 수정하지 않고 간단하게 팩토리에 새로운 클래스를 추가할 수 있다.


• 심플 팩토리 패턴 : 인터페이스는 객체 생성 로직을 숨기고 객체를 생성한다.
    - 팩토리 메서드 패턴, 추상 팩토리 패턴을 이해하기 위한 기본 개념
    - 여러 종류의 객체를 사용자가 직접 클래스를 호출하지 않고 생성할 수 있다.

• 팩토리 메서드 패턴 : 인터페이스를 통해 객체를 생성하지만 서브클래스(상속받은 자식)가 객체 생성에 필요한 클래스를 선택한다.
    - 인터페이스를 통해 객체를 생성하지만 팩토리가 아닌 서브 클래스가 해당 객체 생성을 위해 어떤 클래스를 호출할지 결정함.
      즉, 팩토리는 추상 클래스이고 그걸 상속받은 클래스들이 다른 여러 객체를 생성한다.
    - 인스턴스화가 아닌 상속을 통해 객체를 생성한다.
    - 유동적이다.
    - 즉, 팩토리 메소드 패턴은 객체를 생성하은 인터페이스를 정의하고 어떤 클래스를 초기화할지는 서브 클래스의 결정에 맡긴다.

• 추상 팩토리 패턴 : 추상 팩토리는 객체 생성에 필요한 클래스를 노출하지 않고 객체를 생성하는 인터페이스다. 내부적으로 다른 팩토리 객체를 생성한다.
    - 클래스를 직접 호출하지 않고 관련된 객체들을 생성하는 인터페이스를 제공하는 것
    - 추상 팩토리 메서드는 관련된 객체의 집합을 생성한다.

추상 팩토리 패턴과 팩토리 메서드 패턴의 차이?
▶︎ 내 생각에는 팩토리 메서드 패턴은 기능(메서드)를 중심으로, 추상 팩토리 패턴은 클래스간의 조합을 중심으로 설계하는 것 같음. 아님 말고 ㅎㅎ


